# src/telegram/notifier.py

from typing import List
import requests
from src.utils.logger import get_logger

logger = get_logger(__name__)


class TelegramNotifier:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram"""

    def __init__(self, bot_token: str, chat_ids: List[str]):
        self.bot_token = bot_token
        self.chat_ids = chat_ids
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    def send_message(self, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º chat_ids

        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        success_count = 0

        for chat_id in self.chat_ids:
            if self._send_to_chat(chat_id, text):
                success_count += 1

        return success_count > 0

    def _send_to_chat(self, chat_id: str, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç

        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        url = f"{self.base_url}/sendMessage"

        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }

        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()

            result = response.json()

            if result.get("ok"):
                logger.info(f"Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat_id}: {result}")
                return False

        except requests.exceptions.RequestException as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
            return False
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç {chat_id}: {e}")
            return False

    def send_warning(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

        Args:
            message: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        text = f"‚ö†Ô∏è <b>–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n\n{message}"
        return self.send_message(text)

    def send_error(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        Args:
            message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        text = f"üö® <b>–û–®–ò–ë–ö–ê</b>\n\n{message}"
        return self.send_message(text)

    def send_critical(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        Args:
            message: –¢–µ–∫—Å—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏

        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        text = f"üÜò <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n{message}"
        return self.send_message(text)

    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        url = f"{self.base_url}/getMe"

        try:
            response = requests.get(url, timeout=5)
            response.raise_for_status()

            result = response.json()

            if result.get("ok"):
                bot_info = result.get("result", {})
                logger.info(f"Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {bot_info.get('first_name', 'Unknown')}")
                return True
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram –±–æ—Ç—É: {result}")
                return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False